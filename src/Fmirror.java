import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.BoundedRangeModel;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.UIManager;
import javax.swing.text.html.HTMLDocument;

public final class Fmirror extends JFrame
    implements ActionListener, WindowListener, AdjustmentListener, MouseListener
{
       
    /**************************************************************************
     *  Regular expression to match all IANA top-level domains.
     *
     *  List accurate as of 2015/11/24.  List taken from:
     *  http://data.iana.org/TLD/tlds-alpha-by-domain.txt
     *  This pattern is auto-generated by frameworks/ex/common/tools/make-iana-tld-pattern.py
     *
     *  @hide
     **************************************************************************/
    
    //https://github.com/android/platform_frameworks_base/blob/master/core/java/android/util/Patterns.java
    
    static final String IANA_TOP_LEVEL_DOMAINS =
        "(?:"
        + "(?:aaa|aarp|abb|abbott|abogado|academy|accenture|accountant|accountants|aco|active"
        + "|actor|ads|adult|aeg|aero|afl|agency|aig|airforce|airtel|allfinanz|alsace|amica|amsterdam"
        + "|android|apartments|app|apple|aquarelle|aramco|archi|army|arpa|arte|asia|associates"
        + "|attorney|auction|audio|auto|autos|axa|azure|a[cdefgilmoqrstuwxz])"
        + "|(?:band|bank|bar|barcelona|barclaycard|barclays|bargains|bauhaus|bayern|bbc|bbva"
        + "|bcn|beats|beer|bentley|berlin|best|bet|bharti|bible|bid|bike|bing|bingo|bio|biz|black"
        + "|blackfriday|bloomberg|blue|bms|bmw|bnl|bnpparibas|boats|bom|bond|boo|boots|boutique"
        + "|bradesco|bridgestone|broadway|broker|brother|brussels|budapest|build|builders|business"
        + "|buzz|bzh|b[abdefghijmnorstvwyz])"
        + "|(?:cab|cafe|cal|camera|camp|cancerresearch|canon|capetown|capital|car|caravan|cards"
        + "|care|career|careers|cars|cartier|casa|cash|casino|cat|catering|cba|cbn|ceb|center|ceo"
        + "|cern|cfa|cfd|chanel|channel|chat|cheap|chloe|christmas|chrome|church|cipriani|cisco"
        + "|citic|city|cityeats|claims|cleaning|click|clinic|clothing|cloud|club|clubmed|coach"
        + "|codes|coffee|college|cologne|com|commbank|community|company|computer|comsec|condos"
        + "|construction|consulting|contractors|cooking|cool|coop|corsica|country|coupons|courses"
        + "|credit|creditcard|creditunion|cricket|crown|crs|cruises|csc|cuisinella|cymru|cyou|c[acdfghiklmnoruvwxyz])"
        + "|(?:dabur|dad|dance|date|dating|datsun|day|dclk|deals|degree|delivery|dell|delta"
        + "|democrat|dental|dentist|desi|design|dev|diamonds|diet|digital|direct|directory|discount"
        + "|dnp|docs|dog|doha|domains|doosan|download|drive|durban|dvag|d[ejkmoz])"
        + "|(?:earth|eat|edu|education|email|emerck|energy|engineer|engineering|enterprises"
        + "|epson|equipment|erni|esq|estate|eurovision|eus|events|everbank|exchange|expert|exposed"
        + "|express|e[cegrstu])"
        + "|(?:fage|fail|fairwinds|faith|family|fan|fans|farm|fashion|feedback|ferrero|film"
        + "|final|finance|financial|firmdale|fish|fishing|fit|fitness|flights|florist|flowers|flsmidth"
        + "|fly|foo|football|forex|forsale|forum|foundation|frl|frogans|fund|furniture|futbol|fyi"
        + "|f[ijkmor])"
        + "|(?:gal|gallery|game|garden|gbiz|gdn|gea|gent|genting|ggee|gift|gifts|gives|giving"
        + "|glass|gle|global|globo|gmail|gmo|gmx|gold|goldpoint|golf|goo|goog|google|gop|gov|grainger"
        + "|graphics|gratis|green|gripe|group|gucci|guge|guide|guitars|guru|g[abdefghilmnpqrstuwy])"
        + "|(?:hamburg|hangout|haus|healthcare|help|here|hermes|hiphop|hitachi|hiv|hockey|holdings"
        + "|holiday|homedepot|homes|honda|horse|host|hosting|hoteles|hotmail|house|how|hsbc|hyundai"
        + "|h[kmnrtu])"
        + "|(?:ibm|icbc|ice|icu|ifm|iinet|immo|immobilien|industries|infiniti|info|ing|ink|institute"
        + "|insure|int|international|investments|ipiranga|irish|ist|istanbul|itau|iwc|i[delmnoqrst])"
        + "|(?:jaguar|java|jcb|jetzt|jewelry|jlc|jll|jobs|joburg|jprs|juegos|j[emop])"
        + "|(?:kaufen|kddi|kia|kim|kinder|kitchen|kiwi|koeln|komatsu|krd|kred|kyoto|k[eghimnprwyz])"
        + "|(?:lacaixa|lancaster|land|landrover|lasalle|lat|latrobe|law|lawyer|lds|lease|leclerc"
        + "|legal|lexus|lgbt|liaison|lidl|life|lifestyle|lighting|limited|limo|linde|link|live"
        + "|lixil|loan|loans|lol|london|lotte|lotto|love|ltd|ltda|lupin|luxe|luxury|l[abcikrstuvy])"
        + "|(?:madrid|maif|maison|man|management|mango|market|marketing|markets|marriott|mba"
        + "|media|meet|melbourne|meme|memorial|men|menu|meo|miami|microsoft|mil|mini|mma|mobi|moda"
        + "|moe|moi|mom|monash|money|montblanc|mormon|mortgage|moscow|motorcycles|mov|movie|movistar"
        + "|mtn|mtpc|mtr|museum|mutuelle|m[acdeghklmnopqrstuvwxyz])"
        + "|(?:nadex|nagoya|name|navy|nec|net|netbank|network|neustar|new|news|nexus|ngo|nhk"
        + "|nico|ninja|nissan|nokia|nra|nrw|ntt|nyc|n[acefgilopruz])"
        + "|(?:obi|office|okinawa|omega|one|ong|onl|online|ooo|oracle|orange|org|organic|osaka"
        + "|otsuka|ovh|om)"
        + "|(?:page|panerai|paris|partners|parts|party|pet|pharmacy|philips|photo|photography"
        + "|photos|physio|piaget|pics|pictet|pictures|ping|pink|pizza|place|play|playstation|plumbing"
        + "|plus|pohl|poker|porn|post|praxi|press|pro|prod|productions|prof|properties|property"
        + "|protection|pub|p[aefghklmnrstwy])"
        + "|(?:qpon|quebec|qa)"
        + "|(?:racing|realtor|realty|recipes|red|redstone|rehab|reise|reisen|reit|ren|rent|rentals"
        + "|repair|report|republican|rest|restaurant|review|reviews|rich|ricoh|rio|rip|rocher|rocks"
        + "|rodeo|rsvp|ruhr|run|rwe|ryukyu|r[eosuw])"
        + "|(?:saarland|sakura|sale|samsung|sandvik|sandvikcoromant|sanofi|sap|sapo|sarl|saxo"
        + "|sbs|sca|scb|schmidt|scholarships|school|schule|schwarz|science|scor|scot|seat|security"
        + "|seek|sener|services|seven|sew|sex|sexy|shiksha|shoes|show|shriram|singles|site|ski"
        + "|sky|skype|sncf|soccer|social|software|sohu|solar|solutions|sony|soy|space|spiegel|spreadbetting"
        + "|srl|stada|starhub|statoil|stc|stcgroup|stockholm|studio|study|style|sucks|supplies"
        + "|supply|support|surf|surgery|suzuki|swatch|swiss|sydney|systems|s[abcdeghijklmnortuvxyz])"
        + "|(?:tab|taipei|tatamotors|tatar|tattoo|tax|taxi|team|tech|technology|tel|telefonica"
        + "|temasek|tennis|thd|theater|theatre|tickets|tienda|tips|tires|tirol|today|tokyo|tools"
        + "|top|toray|toshiba|tours|town|toyota|toys|trade|trading|training|travel|trust|tui|t[cdfghjklmnortvwz])"
        + "|(?:ubs|university|uno|uol|u[agksyz])"
        + "|(?:vacations|vana|vegas|ventures|versicherung|vet|viajes|video|villas|vin|virgin"
        + "|vision|vista|vistaprint|viva|vlaanderen|vodka|vote|voting|voto|voyage|v[aceginu])"
        + "|(?:wales|walter|wang|watch|webcam|website|wed|wedding|weir|whoswho|wien|wiki|williamhill"
        + "|win|windows|wine|wme|work|works|world|wtc|wtf|w[fs])"
        + "|(?:\u03b5\u03bb|\u0431\u0435\u043b|\u0434\u0435\u0442\u0438|\u043a\u043e\u043c|\u043c\u043a\u0434"
        + "|\u043c\u043e\u043d|\u043c\u043e\u0441\u043a\u0432\u0430|\u043e\u043d\u043b\u0430\u0439\u043d"
        + "|\u043e\u0440\u0433|\u0440\u0443\u0441|\u0440\u0444|\u0441\u0430\u0439\u0442|\u0441\u0440\u0431"
        + "|\u0443\u043a\u0440|\u049b\u0430\u0437|\u0570\u0561\u0575|\u05e7\u05d5\u05dd|\u0627\u0631\u0627\u0645\u0643\u0648"
        + "|\u0627\u0644\u0627\u0631\u062f\u0646|\u0627\u0644\u062c\u0632\u0627\u0626\u0631|\u0627\u0644\u0633\u0639\u0648\u062f\u064a\u0629"
        + "|\u0627\u0644\u0645\u063a\u0631\u0628|\u0627\u0645\u0627\u0631\u0627\u062a|\u0627\u06cc\u0631\u0627\u0646"
        + "|\u0628\u0627\u0632\u0627\u0631|\u0628\u06be\u0627\u0631\u062a|\u062a\u0648\u0646\u0633"
        + "|\u0633\u0648\u062f\u0627\u0646|\u0633\u0648\u0631\u064a\u0629|\u0634\u0628\u0643\u0629"
        + "|\u0639\u0631\u0627\u0642|\u0639\u0645\u0627\u0646|\u0641\u0644\u0633\u0637\u064a\u0646"
        + "|\u0642\u0637\u0631|\u0643\u0648\u0645|\u0645\u0635\u0631|\u0645\u0644\u064a\u0633\u064a\u0627"
        + "|\u0645\u0648\u0642\u0639|\u0915\u0949\u092e|\u0928\u0947\u091f|\u092d\u093e\u0930\u0924"
        + "|\u0938\u0902\u0917\u0920\u0928|\u09ad\u09be\u09b0\u09a4|\u0a2d\u0a3e\u0a30\u0a24|\u0aad\u0abe\u0ab0\u0aa4"
        + "|\u0b87\u0ba8\u0bcd\u0ba4\u0bbf\u0baf\u0bbe|\u0b87\u0bb2\u0b99\u0bcd\u0b95\u0bc8|\u0b9a\u0bbf\u0b99\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0bc2\u0bb0\u0bcd"
        + "|\u0c2d\u0c3e\u0c30\u0c24\u0c4d|\u0dbd\u0d82\u0d9a\u0dcf|\u0e04\u0e2d\u0e21|\u0e44\u0e17\u0e22"
        + "|\u10d2\u10d4|\u307f\u3093\u306a|\u30b0\u30fc\u30b0\u30eb|\u30b3\u30e0|\u4e16\u754c"
        + "|\u4e2d\u4fe1|\u4e2d\u56fd|\u4e2d\u570b|\u4e2d\u6587\u7f51|\u4f01\u4e1a|\u4f5b\u5c71"
        + "|\u4fe1\u606f|\u5065\u5eb7|\u516b\u5366|\u516c\u53f8|\u516c\u76ca|\u53f0\u6e7e|\u53f0\u7063"
        + "|\u5546\u57ce|\u5546\u5e97|\u5546\u6807|\u5728\u7ebf|\u5927\u62ff|\u5a31\u4e50|\u5de5\u884c"
        + "|\u5e7f\u4e1c|\u6148\u5584|\u6211\u7231\u4f60|\u624b\u673a|\u653f\u52a1|\u653f\u5e9c"
        + "|\u65b0\u52a0\u5761|\u65b0\u95fb|\u65f6\u5c1a|\u673a\u6784|\u6de1\u9a6c\u9521|\u6e38\u620f"
        + "|\u70b9\u770b|\u79fb\u52a8|\u7ec4\u7ec7\u673a\u6784|\u7f51\u5740|\u7f51\u5e97|\u7f51\u7edc"
        + "|\u8c37\u6b4c|\u96c6\u56e2|\u98de\u5229\u6d66|\u9910\u5385|\u9999\u6e2f|\ub2f7\ub137"
        + "|\ub2f7\ucef4|\uc0bc\uc131|\ud55c\uad6d|xbox"
        + "|xerox|xin|xn\\-\\-11b4c3d|xn\\-\\-1qqw23a|xn\\-\\-30rr7y|xn\\-\\-3bst00m|xn\\-\\-3ds443g"
        + "|xn\\-\\-3e0b707e|xn\\-\\-3pxu8k|xn\\-\\-42c2d9a|xn\\-\\-45brj9c|xn\\-\\-45q11c|xn\\-\\-4gbrim"
        + "|xn\\-\\-55qw42g|xn\\-\\-55qx5d|xn\\-\\-6frz82g|xn\\-\\-6qq986b3xl|xn\\-\\-80adxhks"
        + "|xn\\-\\-80ao21a|xn\\-\\-80asehdb|xn\\-\\-80aswg|xn\\-\\-90a3ac|xn\\-\\-90ais|xn\\-\\-9dbq2a"
        + "|xn\\-\\-9et52u|xn\\-\\-b4w605ferd|xn\\-\\-c1avg|xn\\-\\-c2br7g|xn\\-\\-cg4bki|xn\\-\\-clchc0ea0b2g2a9gcd"
        + "|xn\\-\\-czr694b|xn\\-\\-czrs0t|xn\\-\\-czru2d|xn\\-\\-d1acj3b|xn\\-\\-d1alf|xn\\-\\-efvy88h"
        + "|xn\\-\\-estv75g|xn\\-\\-fhbei|xn\\-\\-fiq228c5hs|xn\\-\\-fiq64b|xn\\-\\-fiqs8s|xn\\-\\-fiqz9s"
        + "|xn\\-\\-fjq720a|xn\\-\\-flw351e|xn\\-\\-fpcrj9c3d|xn\\-\\-fzc2c9e2c|xn\\-\\-gecrj9c"
        + "|xn\\-\\-h2brj9c|xn\\-\\-hxt814e|xn\\-\\-i1b6b1a6a2e|xn\\-\\-imr513n|xn\\-\\-io0a7i"
        + "|xn\\-\\-j1aef|xn\\-\\-j1amh|xn\\-\\-j6w193g|xn\\-\\-kcrx77d1x4a|xn\\-\\-kprw13d|xn\\-\\-kpry57d"
        + "|xn\\-\\-kput3i|xn\\-\\-l1acc|xn\\-\\-lgbbat1ad8j|xn\\-\\-mgb9awbf|xn\\-\\-mgba3a3ejt"
        + "|xn\\-\\-mgba3a4f16a|xn\\-\\-mgbaam7a8h|xn\\-\\-mgbab2bd|xn\\-\\-mgbayh7gpa|xn\\-\\-mgbbh1a71e"
        + "|xn\\-\\-mgbc0a9azcg|xn\\-\\-mgberp4a5d4ar|xn\\-\\-mgbpl2fh|xn\\-\\-mgbtx2b|xn\\-\\-mgbx4cd0ab"
        + "|xn\\-\\-mk1bu44c|xn\\-\\-mxtq1m|xn\\-\\-ngbc5azd|xn\\-\\-node|xn\\-\\-nqv7f|xn\\-\\-nqv7fs00ema"
        + "|xn\\-\\-nyqy26a|xn\\-\\-o3cw4h|xn\\-\\-ogbpf8fl|xn\\-\\-p1acf|xn\\-\\-p1ai|xn\\-\\-pgbs0dh"
        + "|xn\\-\\-pssy2u|xn\\-\\-q9jyb4c|xn\\-\\-qcka1pmc|xn\\-\\-qxam|xn\\-\\-rhqv96g|xn\\-\\-s9brj9c"
        + "|xn\\-\\-ses554g|xn\\-\\-t60b56a|xn\\-\\-tckwe|xn\\-\\-unup4y|xn\\-\\-vermgensberater\\-ctb"
        + "|xn\\-\\-vermgensberatung\\-pwb|xn\\-\\-vhquv|xn\\-\\-vuq861b|xn\\-\\-wgbh1c|xn\\-\\-wgbl6a"
        + "|xn\\-\\-xhq521b|xn\\-\\-xkc2al3hye2a|xn\\-\\-xkc2dl3a5ee0h|xn\\-\\-y9a3aq|xn\\-\\-yfro4i67o"
        + "|xn\\-\\-ygbi2ammx|xn\\-\\-zfr164b|xperia|xxx|xyz)"
        + "|(?:yachts|yamaxun|yandex|yodobashi|yoga|yokohama|youtube|y[et])"
        + "|(?:zara|zip|zone|zuerich|z[amw]))";
  
    private static final String IP_ADDRESS_STRING =
        "((25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\.(25[0-5]|2[0-4]"
        + "[0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]"
        + "[0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}"
        + "|[1-9][0-9]|[0-9]))";
   
    /**
     * Valid UCS characters defined in RFC 3987. Excludes space characters.
     */
    private static final String UCS_CHAR = "[" +
            "\u00A0-\uD7FF" +
            "\uF900-\uFDCF" +
            "\uFDF0-\uFFEF" +
            "\uD800\uDC00-\uD83F\uDFFD" +
            "\uD840\uDC00-\uD87F\uDFFD" +
            "\uD880\uDC00-\uD8BF\uDFFD" +
            "\uD8C0\uDC00-\uD8FF\uDFFD" +
            "\uD900\uDC00-\uD93F\uDFFD" +
            "\uD940\uDC00-\uD97F\uDFFD" +
            "\uD980\uDC00-\uD9BF\uDFFD" +
            "\uD9C0\uDC00-\uD9FF\uDFFD" +
            "\uDA00\uDC00-\uDA3F\uDFFD" +
            "\uDA40\uDC00-\uDA7F\uDFFD" +
            "\uDA80\uDC00-\uDABF\uDFFD" +
            "\uDAC0\uDC00-\uDAFF\uDFFD" +
            "\uDB00\uDC00-\uDB3F\uDFFD" +
            "\uDB44\uDC00-\uDB7F\uDFFD" +
            "&&[^\u00A0[\u2000-\u200A]\u2028\u2029\u202F\u3000]]";

    /**
     * Valid characters for IRI label defined in RFC 3987.
     */
    private static final String LABEL_CHAR = "a-zA-Z0-9" + UCS_CHAR;

    /**
     * Valid characters for IRI TLD defined in RFC 3987.
     */
    private static final String TLD_CHAR = "a-zA-Z" + UCS_CHAR;

    /**
     * RFC 1035 Section 2.3.4 limits the labels to a maximum 63 octets.
     */
    private static final String IRI_LABEL =
        "[" + LABEL_CHAR + "](?:[" + LABEL_CHAR + "_\\-]{0,61}[" +
        LABEL_CHAR + "]){0,1}";

    /**
     * RFC 3492 references RFC 1034 and limits Punycode algorithm output to 63
     * characters.
     */
    private static final String PUNYCODE_TLD = "xn\\-\\-[\\w\\-]{0,58}\\w";

    private static final String TLD =
        "(" + PUNYCODE_TLD + "|" + "[" + TLD_CHAR + "]{2,63}" +")";

    private static final String HOST_NAME = "(" + IRI_LABEL + "\\.)+" + TLD;

    private static final String DOMAIN_NAME_STR = 
        "(" + HOST_NAME + "|" + IP_ADDRESS_STRING + ")";
   
    private static final String PROTOCOL = "(?i:http|https|rtsp)://";

    /* A word boundary or end of input.  This is to stop foo.sure from matching
    as foo.su 
    */
    private static final String WORD_BOUNDARY = "(?:\\b|$|^)";
      
    private static final String PATH_AND_QUERY =
        "[/\\?](?:(?:[" + LABEL_CHAR
        + ";/\\?:@&=#~"  // plus optional query params
        + "\\-\\.\\+!\\*'\\(\\),_\\$])|(?:%[a-fA-F0-9]{2}))*";
  
    
    /**************************************************************************
     *  
     * ***********************************************************************/
    
    private static final String BAR =
    "=======================================================================" +
    "=======================================================================" +
    "=======================================================================";
    
    private static final String WINDOWS_TITLE =
        "Sistema de Backup do Forumeiros";
    
    //Painel dos botoes da janela
    private static JPanel northPanel;
    //Botoes da janela
    private static JButton pauseButton;
    private static JButton exitButton;
    //Barra de progresso indicando o progresso da leitura/escrita do log
    private static JProgressBar progressBar;
    //Objeto para saida de texto na janela
    private static JTextPane textArea;
    //Barra de rolagem vertical para a janela de texto
    private static JScrollPane scrollPane;
    //Barra de status na janela para exibir informacoes
    private static JLabel statusBar;
    //Item de menu da barra de menu da janela
    private static JMenu selector;
    
    //Tipo enum usado para facilitar todo o processamento dos tipos de arquivos
    //Desde insercao de seus respectivos checkBoxes no menu dropdown, ateh
    //criacao de diretorios especificos para gravacao de cada tipo de arquivo,
    //etc...
    private enum FileType
    {
        JS( "Javascript", "&#9662;<font color=\"Green\">" ),
        CSS( "CSS", "&#9662;<font color=\"#8B008B\">" ),
        IMAGE( "Imagens", "&#9662;<font color=\"Blue\">" );
        
        public String label;
        public String tagColor;
        public static final int NUMBER_OF_ITENS = 3;
    
        FileType(String l, String c)
        {
            label = l;
            tagColor = c;
        }
                 
    }//fim do tipo enum FileType
    
    //Itens do menu dropdown que determinam se cada tipo de arquivo
    //correspondente deve ser baixados ou nao
    private static final JCheckBoxMenuItem[] CHECK_BOX_ITEM = 
        new JCheckBoxMenuItem[FileType.NUMBER_OF_ITENS];
    
    //Item do menu dropdown para encerrar o programa
    private static JMenuItem exitActionItem;
            
    //Documento usado pelo objeto textArea. A saida de texto serah feita usando
    //este objeto
    private static HTMLDocument doc = null;
    
    //Objeto que retorna informacoes sobre estados da barra de rolagem. Eh usado
    //para implementar a rolagem automatica
    BoundedRangeModel brm = null;
    //Indica se a barra de rolagem vertical esta posicionada no limite inferior,
    //o que ativarah a rolagem automatica
    boolean atBottom = true;
      
    //Indica se o download foi completado
    private static final AtomicBoolean CONCLUDED = new AtomicBoolean(false);
  
    //Separador de path 
    private static final String SEP = "/";
          
    //Nome da pasta raiz para o backup do forum. Recebe o proprio nome do forum
    private static String root;
    
    //String com nome da pasta raiz mais separador 
    private static String rootSep;
    
    //Guarda o diretorio para onde serao baixados todos os arquivos
    private static String downloadDir;
    
    //Nome que sera atribuido ao campo downloadDir
    private static final String DOWNLOAD_DIR_NAME = "download";
    
    private static final String AVATARS_DIR_NAME = "Avatares";
    
    private static final String SMILES_DIR_NAME = "Smiles";
   
    //Nome do arquivo de log com o caminho root + SEP + DOWNLOAD_FILENAME
    private static String downloadFileName;
           
    //Nome do arquivo de log que registra tudo que jah foi baixado
    private static final String DOWNLOAD_FILE_NAME = "downloaded.log";
    
    //url base do forum. Acessa a pagina inicial
    private static final String DEFAULT_URL = 
        "https://clubeceticismo.forumbrasil.net";
    
    //Armazena a URL do forum
    private static String baseUrl;
    
    //String usada para localizar um link para secao exibido por uma pagina
    //html do forum
    private static final String HIERARCHY = "class=\"hierarchy\"";
    //String usada para localizar um link para topico exibido por uma pagina
    //html do forum
    private static final String TOPIC = "class=\"topictitle\""; 
    
    //String usada para detectar que jah foram baixadas todas as paginas de 1 
    //topico
    private static final String NO_MORE_PAGES = 
       "<title>Informa\u00e7\u00f5es - P\u00e1gina";
   
    //Estrutura para armazenar as IDs de elementos jah baixados pelo programa
    private static final HashSet<String> DOWNLOADED = new HashSet<String>();
    
    //Conjunto das IDs de elementos que o programa estah tentando baixar ou jah
    //baixou
    private static final HashSet<String> TEMP = new HashSet<String>();
              
    //Indicam para tryConnection() o tipo de stream que deve ser aberto, em 
    //funcao do tipo de arquivo que se vai baixar : HTML ou nao HTML
    private enum typeOfConnection { FOR_ANY_FILE , FOR_HTML_FILE };
    //Indicam para tryOpenFile() o tipo de stream que deve ser aberto, em 
    //funcao do tipo de arquivo que se vai gravar : HTML ou nao HTML
    private enum typeOfFile { FOR_WRITER, FOR_OUTPUTSTREAM };
    
    //Uma auto-referencia para este objeto, para ser usada por metodos estaticos
    private static Fmirror thisObject;
   
    //Cor predominante da interface
    private static final Color PREDOMINANT_COLOR = Color.LIGHT_GRAY;
    //Cor secundaria da interface
    private static final Color SECUNDARY_COLOR = Color.WHITE;
    //Cor do painel superior
    private static final Color NORTH_PANEL_COLOR = SECUNDARY_COLOR;
    //Cor da barra de status
    private static final Color STATUS_BAR_COLOR = SECUNDARY_COLOR;
    //Cor de fundo default para os botoes
    private static final Color BUTTON_NORMAL_COLOR = PREDOMINANT_COLOR;
    //Cor de fundo para area de texto
    private static final Color TEXT_AREA_COLOR = PREDOMINANT_COLOR;
    //Cor do botao Sair com o mouse sobre ele
    private static final Color LIGHT_RED = new Color(255,56,41);
    
    private static String currentWriteColor;
    
    //Lista de todas as conexoes abertas no momento
    private static final HashSet OPEN_CONNECTIONS = new HashSet();
    //Lista de todos os arquivos abertos no nomento
    private static final HashSet<File> OPEN_FILES = new HashSet<File>();
    
    //Quando true o programa eh encerrado
    private static boolean stop = false;
    //Lock para acesso concorrente ao campo stop
    private static final Lock STOP_LOCK = new ReentrantLock();
    //Se true o download serah pausado
    private static boolean pause = false;
    //Bloqueio. Evita que duas threads acessem o campo pause ao mesmo tempo   
    private static final Lock PAUSE_LOCK = new ReentrantLock();
    //Adormece uma thread e/ou envia sinal para acorda-la       
    private static final Condition PAUSE_CONDITION = PAUSE_LOCK.newCondition();
    
    //Numero de arquivos jah baixados. Se nao mudar ao fim da execucao do 
    //programa, o arquivo de log nao precisa ser gravado pois nada foi baixado
    private static int SavedDownloadLength;
    
    //Extensoes de arquivos
    private static final String[] EXTENSIONS_ARRAY =
    { 
        "js" , "css", "htm", "html", "xml", "json",
        "php", "asp", "aspx", "jsp", "cfm",
        "txt", 
        "ico", "jpg", "png", "bmp", "gif", "tif",
        "mp3", "wav", "mid", 
        "avi", "mpg", "wmv", "mov", "fla", "swf"
    };   
    
    /*
    private static final char[] TIMELAPSE =
    { '\u2596', '\u2598', '\u259d', '\u2597'};
    
    private static int tick = 0;*/
    
    //Arquivo em servidor externo 
    private static String externalLink = 
              "("
            + "("
            + "(?:" + PROTOCOL + ")" 
            + "(?:" + DOMAIN_NAME_STR + ")"
            + ")"
            + "(" + PATH_AND_QUERY + ")?"
            + WORD_BOUNDARY 
            + ")";
    //Arquivo no sistema de arquivos do servidor       
    private static String internalLink = 
        "/((\\w+[.]?)+/)*[-.\\w=@;&$~'#()?]+[.](?i:";
    //Topico ou secao
    private static final String SECTION_TOPIC_POST = 
        "/(t|f)\\d+(p\\d+)?-[-a-z0-9]+(#\\d+)?";
    //Trocar por baseUrl
    private static final String TO_BASEURL = "/\\w*";
    
    private static Pattern pattInternalLink;
    private static Pattern pattExternalLink;
    private static final Pattern PATT_SECTION_TOPIC_POST = 
        Pattern.compile(SECTION_TOPIC_POST);
    private static final Pattern PATT_TO_BASEURL = 
        Pattern.compile(TO_BASEURL);
    
    /*[00]----------------------------------------------------------------------
    *                        Construtor da classe
    --------------------------------------------------------------------------*/
    public Fmirror()
    {
        super(WINDOWS_TITLE);
        
        //Configura aspectos da janela JOPTionPane
        UIManager.put("OptionPane.yesButtonText", "Sim"); 
        UIManager.put("OptionPane.noButtonText", "N\u00e3o");
        UIManager.put("OptionPane.cancelButtonText", "Cancela");
        UIManager.put("OptionPane.inputDialogTitle", "Forumeiros");
        
        
        StringBuilder b = new StringBuilder(128);
        for (int i = 0; i < EXTENSIONS_ARRAY.length; i++)
        {
           b.append(EXTENSIONS_ARRAY[i]);
           if (i < EXTENSIONS_ARRAY.length - 1) 
               b.append("|");
           else
               b.append(")");
        }
        internalLink += new String(b);
        pattInternalLink = Pattern.compile(internalLink);
                   
        //Insere uma barra de menus na janela
        JMenuBar menuBar = new JMenuBar();
        setJMenuBar(menuBar);
        
        //Cria menu dropdown Seletor que sera o item da barra de menu da janela
        selector = new JMenu("Seletor");
        selector.setToolTipText("Selecione os tipos de arquivos para baixar");
        
        //Adiciona o menu dropdown Seletor a barra de menus da janela
        menuBar.add(selector);
        
        //Cria, inicializa e adiciona itens checkBox ao menu dropdown seletor
        for (FileType item: FileType.values())
        {
            CHECK_BOX_ITEM[item.ordinal()] = new JCheckBoxMenuItem(item.label);
            
            //O programa inicia com download de imagens desabilitado por default
            CHECK_BOX_ITEM[item.ordinal()].setState((item != FileType.IMAGE));
            
            selector.add(CHECK_BOX_ITEM[item.ordinal()]);
        }
                
        //Adiciona um separador ao menu drop down Seletor
        selector.addSeparator();
        
        //Cria e adiciona mais um item ao menu drop down Seletor. Clicando-se
        //neste item a execucao do programa serah encerrada
        exitActionItem = new JMenuItem("Sair");
        selector.add(exitActionItem);
        
        //Cria os botoes Sair e Pausar da janela
        pauseButton = new JButton();
        exitButton = new JButton();
        pauseButton.setBackground(BUTTON_NORMAL_COLOR);
        exitButton.setBackground(BUTTON_NORMAL_COLOR);
        pauseButton.setText("  Iniciar  ");
        exitButton.setText("     Sair     ");
       
        //Cria e configura o painel que exibirah os botoes Sair e Pausar
        northPanel = new JPanel(new FlowLayout());
        northPanel.setBackground(NORTH_PANEL_COLOR);
        northPanel.setBorder(BorderFactory.createLoweredBevelBorder());
       
        //Adiciona os botoes ao painel
        northPanel.add(pauseButton);
        northPanel.add(exitButton);
        
        //Cria e configura uma barra de progresso (serve para indicar o
        //progresso quando da leitura e gravacao do arquivo de log)
        progressBar = new JProgressBar();
        progressBar.setStringPainted(true);
        progressBar.setForeground(Color.BLACK);
        progressBar.setBorder(BorderFactory.createLoweredBevelBorder());
        progressBar.setValue(0);
        progressBar.setString("");
        
        //Adiciona a barra de progresso no topo da janela. Serah substituida
        //pelo painel dos botoes Sair e Pausar quando terminar a leitura do 
        //arquivo de log. Jah o painel sera trocado novamente por essa barra
        //antes de terminar a execucao para exibir o progresso na gravacao do
        //arquivo de log.
        add(progressBar, BorderLayout.NORTH);
         
        //Cria e configura uma area de texto para a janela
        textArea = new JTextPane();
        //A area de saida de texto deverah renderizar html
        textArea.setContentType("text/html");
        textArea.setEditable(false);
        textArea.setBackground(TEXT_AREA_COLOR);
        
        //O document usado em textArea. Texto sera inserido atraves deste objeto
        doc = (HTMLDocument) textArea.getStyledDocument();
             
        //Cria a barra de rolagem para area de texto
        scrollPane = new JScrollPane(textArea);
        
        //Retorna informacoes sobre a barra de rolagem vertical. Usado para 
        //ligar o scroll automatico do texto quando a barra de rolagem for 
        //posicionada no limite inferior
	brm = scrollPane.getVerticalScrollBar().getModel();
	
        //Adiciona a area de texto com barra de rolagem na janela
        add(scrollPane, BorderLayout.CENTER);
        
        //Cria uma barra de status para a janela
        statusBar = new JLabel();
        statusBar.setBorder(BorderFactory.createLoweredBevelBorder());
        statusBar.setBackground(STATUS_BAR_COLOR);
        
        //Adiciona a barra de status na parte inferior da janela
        add(statusBar, BorderLayout.SOUTH);
        
        //Insere o icone do forum na janela
        try
        {
            URL urlImage = new URL
                               (
                                   "https://illiweb.com/fa/modernbb/" +
                                   "logo-simple.png"
                                );
            Image icon = Toolkit.getDefaultToolkit().getImage(urlImage);
            setIconImage(icon);
        }
        catch (Exception e)
        {
            System.err.println("ERRO :" + e);
        }
       
    }//fim do construtor Fmirror()
       
    /*[00]----------------------------------------------------------------------
    *
    --------------------------------------------------------------------------*/
    private static URL link2Url(String link)
    {
        try
        {
            if (link.length() == 0) return null;
            if (link.startsWith("http")) return new URL(link);
            if (link.equals("/")) return new URL(baseUrl);
            if (link.charAt(0) == '/') return new URL(baseUrl + link);
                        
            return new URL(baseUrl);
        }
        catch (MalformedURLException e)
        {
            System.err.println("ERRO :" + e);
            return null;
        }
    }//fim de link2Url()
    
    /*[00]----------------------------------------------------------------------
    *
    --------------------------------------------------------------------------*/
    private static String getFilesExtension(final String fileName)
    {
        int point = fileName.lastIndexOf('.');
        if ((point == -1) || (point + 1) == fileName.length()) return "";
        String ext = 
            fileName.substring(point + 1, fileName.length()).toLowerCase();
        return ext;
        
    }//fim de getFilesExtension()
    
    /*[00]----------------------------------------------------------------------
    *
    --------------------------------------------------------------------------*/
    private static String link2FileName(final String link)
    {
        
        int firstChar = link.indexOf(':') + 3; 
        //retira http:// ou https:// do link
        char[] c = 
            link.substring(firstChar, link.length()).toCharArray();
       
        for (int i = 0; i < c.length; i++)
        {
            switch (c[i])
            {
                case '/':
                    c[i] = '.';
                    break;
                case ' ':
                    c[i] = '_';
                    break;
                case '\\': case '|' : case '>' : case '<' :
                case '*' : case ':' : case '?' : case ';' :
                    c[i] = '$';
                    break;
                case '"' :
                    c[i] = '\'';
               
            }//fim do switch
          
        }//fim do for i
                           
        return new String(c);
        
    }//fim de link2FileName()
    
    /*[01]----------------------------------------------------------------------
    *  Converte a string para um nome valido em qualquer sistema de arquivos
    --------------------------------------------------------------------------*/
    private static String url2FileName(final URL url)
    {
        return link2FileName(url.toString());
    }//fim de url2Filename()
    
    /*[02]----------------------------------------------------------------------
    *   Limpa uma string de titulo de topico ou secao da formatacao dada pelo
    *   sistema do forum.
    --------------------------------------------------------------------------*/
    private static String clean(String title)
    {
        int subtract = title.indexOf('-') + 1;
        char[] chars = new char[title.length() - subtract];
        title.getChars(subtract, title.length(), chars, 0);
        
        for (int i = 0; i <chars.length; i++)
        {
            if (chars[i] == '-') 
                chars[i] = ' ';
            else
                chars[i] = Character.toUpperCase(chars[i]);
        }
        return new String(chars);
    }//fim de clean()
    
    /*[03]----------------------------------------------------------------------
    *  Fecha todas as conexoes e arquivos na lista de conexoes abertas, e deleta 
    *  todos os arquivos que estavam nessa lista depois de fecha-los
    --------------------------------------------------------------------------*/
    private static void closeAll()
    {
        try
        {
            for(Object o: OPEN_CONNECTIONS)// close(o, null);
            {
                if (o instanceof BufferedReader)
                    ((BufferedReader) o).close();
                else if (o instanceof BufferedWriter)
                    ((BufferedWriter) o).close();
                else if (o instanceof BufferedInputStream)
                    ((BufferedInputStream) o).close();
                else ((BufferedOutputStream) o).close();
            }

            for (File file: OPEN_FILES) if (file.exists()) file.delete();
        }
        catch (Exception e)
        {
            System.out.println("ERRO :" + e);
            System.exit(1);
        }
    }//fim de closeAll()
    
  /*[04]----------------------------------------------------------------------
    *  Fecha uma conexao e a retira da lista de conexoes abertas. Pode ser uma
    *  conexao de rede ou um arquivo aberto para gravacao.
    --------------------------------------------------------------------------*/
    private static void close(Object o, File f)
    {  
        //Uma referencia null pode ser enviada a este metodo porque as chamadas
        //a close() estao em blocos finally. Que executam em qualquer circuns-
        //cia. Mesmo quando os arquivos nao sao abertos.
        if (o == null) return;
        
        try
        {
            if (o instanceof BufferedReader)
                ((BufferedReader) o).close();
            else if (o instanceof BufferedWriter)
                ((BufferedWriter) o).close();
            else if (o instanceof BufferedInputStream)
                ((BufferedInputStream) o).close();
            else ((BufferedOutputStream) o).close();
            
            OPEN_CONNECTIONS.remove(o);
            
            //Se f eh null, estah sendo fechada uma conexao de entrada de rede
            //Mas se f diferente de null, um arquivo foi aberto juntamente com a
            //conexao de output, e precisa ser removido da lista de arquivos 
            //abertos. Ja que fechar sua conexao determina tambem seu fechamento
            if (f != null) OPEN_FILES.remove(f);
        }
        catch(Exception e)
        {
            showErrorMessage(e);
        }
    }//fim de close()
    
    /*[05]----------------------------------------------------------------------
    *  Tenta abrir um arquivo do tipo especificado e retorna uma referencia
    *  para o arquivo aberto, ou null em caso de insucesso
    --------------------------------------------------------------------------*/
    private static Object tryOpenFile(final File file, final typeOfFile type)
    {
        Object out = null;
        try
        {
            if (type == typeOfFile.FOR_OUTPUTSTREAM)
                //Cria e abre o arquivo de bytes para gravacao bufferizada de  
                //arquivo de qualquer tipo. Se file ja existir, sera sobrescrito
                out = new BufferedOutputStream(new FileOutputStream(file));
            else
                //Abre o arquivo para gravar uma pagina html. Se file ja existir
                //serah sobrescrito
                out = new BufferedWriter
                          (
                              new FileWriter
                                  (
                                      file, 
                                      StandardCharsets.UTF_8
                                  )
                          );
            
            //Registra na lista de arquivos abertos
            OPEN_FILES.add(file); 
            OPEN_CONNECTIONS.add(out);
          
        }
        catch (IOException e)
        {
            if (type == typeOfFile.FOR_OUTPUTSTREAM)
            {
                System.err.println("ERRO: " + e);
                return null;
            }
            else
                showErrorMessage(e);    
        }
        //Se nao conseguir abrir o arquivo null eh retornado
        return out;    
    }//fim de tryOpenFile()
    
    /*[06]----------------------------------------------------------------------
    *         Abre um stream para baixar qualquer tipo de arquivo
    --------------------------------------------------------------------------*/
    private static Object tryOpenConnection
                          (
                              final URL url,
                              final int ident,
                              final typeOfConnection con
                          )
    {
        Object in = null;
        boolean exception = true;//flag para checar se conexao foi estabelecida
        int countExceptions = 0;
	
        //Fica tentando estabelecer conexao com o servidor. O programa fica 
        //preso neste loop enquanto a conexao nao for estabelecida. A menos 
        //que o usuario aborte o programa ou desista do arquivo
        while (exception) 
        {
            //Se usuario solicitou pausar o programa estah thread eh posta para
            //dormir ateh que o usuario clique em continuar download
            checkPause();
            checkStop();
            try
            {
                if (con == typeOfConnection.FOR_HTML_FILE)
                    in = new BufferedReader
                             (
                                 new InputStreamReader
                                     (
                                         url.openStream(),
                                         StandardCharsets.UTF_8
                                     )
                             );
                else
                   in = new BufferedInputStream(url.openStream()); 
                
                //Registra na lista de conexoes abertas
                OPEN_CONNECTIONS.add(in);
                
                exception = false;						
	    }
            //Captura erro de time out
            catch (IOException e)
            {
                System.err.println("ERRO: " + e);
                //Envia a mensagem de erro para a area de texto
                write
                (
                    "<font color=\"Red\">" + e.getMessage() + "</font><br />",
                    ident
                );
               
                if(++countExceptions > 2)
                {
                    Toolkit.getDefaultToolkit().beep();
                    int answer = JOptionPane.showConfirmDialog
                                 (
                                     thisObject,
                                     (con == typeOfConnection.FOR_ANY_FILE) ? 
                                     "Desistir do arquivo?":"Abortar download?",
                                     "Falha na conex\u00e3o!",
                                     JOptionPane.YES_NO_OPTION
                                 );
                    if (answer == 0)
                    {
                        if (con == typeOfConnection.FOR_ANY_FILE)
                            return null;
                        else
                            saveLog(1);
                    }
                    else
                        countExceptions = 0;
                }//fim do if
            }
            
        }//fim do while - Conexao estabelecida ou abortada
        
        //Se in eh retornado null conexao nao foi estabelecida
        return in;
    }//fim de tryConnection()
       
    /*[07]----------------------------------------------------------------------
    *                  Baixa qualquer tipo de arquivo 
    --------------------------------------------------------------------------*/
    private static boolean downloadFile
                           (
                               final URL url,
                               final File file,
                               final int ident
                           )
    { 
                      
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        try
        {
            //Abre stream bufferizado
            in = (BufferedInputStream) tryOpenConnection
                                       (
                                           url, 
                                           ident,
                                           typeOfConnection.FOR_ANY_FILE
                                       );

            //Se tryConnection() retorna null a conexao nao pode ser 
            //estabelecida. O metodo aborta e retorna false para que a ID desse
            //arquivo nao seja incluida na lista de arquivos ja baixados
            if (in == null) return false;

            //Abre o arquivo para gravacao bufferizada
            out = (BufferedOutputStream) 
                      tryOpenFile(file,typeOfFile.FOR_OUTPUTSTREAM);

            if (out == null) return false;
            
            write(currentWriteColor + url.toString() + "</font><br />", ident);

            //Le cada byte do arquivo no servidor e grava no sistema de arquivos
            //local como arquivo de bytes
            int umByte;
            while( (umByte = in.read()) != -1 ) out.write(umByte);
        }
        catch(IOException e)
        {
            System.err.println("ERRO :" + e);
            return false;
        }
        //Este bloco sempre executa. Entao mesmo que in e out tenham sido 
        //retornados como null, close() chamado. O metodo close() eh programado
        //para nao tentar fechar referencias null
        finally
        {
            close(in, null); 
            close(out, file);
        }
        
        //Retornar true indica que arquivo foi baixado com sucesso. Sua ID sera
        //incluida na lista de arquivos ja baixados
        return true;
         
    }//fim de downloadFile()
    
    /*[08]----------------------------------------------------------------------
    *            Janela para exibir mensagens de erros fatais
    --------------------------------------------------------------------------*/
    @SuppressWarnings("CallToPrintStackTrace")
    private static void showErrorMessage(Exception e)
    {
        Toolkit.getDefaultToolkit().beep();
        
        String error = e.getMessage();
        
        //Imprime no console a pilha de chamada de metodos desde o ponto onde 
        //ocorreu a excecao
        e.printStackTrace();
        
        //Abre janelinha de mensagem informando o erro
        JOptionPane.showMessageDialog
                    (
                        thisObject,
                        "Erro fatal: " + error,
                        WINDOWS_TITLE,
                        JOptionPane.ERROR_MESSAGE
                    );
        saveLog(1);
        
    }//fim de showErrorMessage()
    
    /*[09]----------------------------------------------------------------------
    *  Le o arquivo de log de download que registra tudo que jah foi baixado
    --------------------------------------------------------------------------*/
    private static void readLog()
    {
        Scanner downloadLog = null;
        try
        {
            File file = new File(downloadFileName);
            long size = file.length();
            long readed = 0;
            downloadLog = new Scanner
                              (
                                  new BufferedReader
                                      (
                                          new FileReader
                                              (
                                                  file,
                                                  StandardCharsets.UTF_8
                                              )
                                       )
                              );
            
            String line = "";
            while (downloadLog.hasNext())
            {
                line = downloadLog.next();
                DOWNLOADED.add(line); TEMP.add(line);
                //O num. de bytes lidos do arquivo em cada linha eh o numero de
                //caracteres na linha + 2 caracteres indicando avanco de linha
                readed += (line.length() + 2);
                setStatusBar("Registrando: " + line);
                int value =(int) (( readed * 100) / size);
                progressBar.setValue(value);
                progressBar.setString(value + "%");
                      
            }//fim do while - Lido arquivo com IDs de tudo que jah foi baixado
            
            progressBar.setValue(100); progressBar.setString("100%");
            
            SavedDownloadLength = DOWNLOADED.size();
        }
        //Ainda nao existe arquivo de log
        catch (FileNotFoundException e)
        {
            setStatusBar("Iniciando pela primeira vez...");
        }
        //Captura erro de io e aborta programa
        catch(Exception e)
        {
            showErrorMessage(e);
        }
        //Esse bloco sempre executa para fechar arquivo caso tenha sido aberto
        finally
        {
            if (downloadLog != null) downloadLog.close();
        }
        
        //Remove a barra de progresso da janela e troca pelo painel com botoes
        //Sair e Pausar
        progressBar.setVisible(false);
        thisObject.remove(progressBar);
        thisObject.add(northPanel, BorderLayout.NORTH);
    }//fim de readLog()
    
    /*[10]----------------------------------------------------------------------
    *                Salva arquivo de log e encerra programa
    --------------------------------------------------------------------------*/
    private static void saveLog(int exitCode)
    {
        closeAll();
        if (SavedDownloadLength == DOWNLOADED.size()) System.exit(exitCode);
        //Troca o painel de botoes Sair e Pausar por uma barra de progresso 
        //indicando o progresso na gravacao do arquivo de log
        thisObject.remove(northPanel);
        progressBar.setVisible(true);
        progressBar.setValue(0);
        thisObject.add(progressBar, BorderLayout.NORTH);
        textArea.setText(null);
                           
        PrintWriter downloadLog = null;
        try
        { 
            //Abre arquivo de log para gravaco e deleta seu conteudo (se houver)
            downloadLog = new PrintWriter
                              (
                                  new BufferedWriter
                                      (
                                          new FileWriter
                                              (
                                                  downloadFileName,
                                                  StandardCharsets.UTF_8
                                              )
                                      )
                              );
            
            //Se a execucao do programa foi interrompida antes da conclusao do
            //download, as IDs de todos os elementos baixados sao gravadas no 
            //arquivo de log
            int size = DOWNLOADED.size(); int count = 0;
            
            for (String s : DOWNLOADED)
            {
                int value = (++count * 100) / size;
                progressBar.setValue(value);
                progressBar.setString(value + "%");
                setStatusBar("Gravando log: " + s);
                downloadLog.println(s);
            }
           
        }
        catch(Exception e)
        {
            System.err.println("ERRO :" + e);
        }
        finally
        {
           if (downloadLog != null) downloadLog.close();
        }
        //Encerra execucao do programa
        System.exit(exitCode);
              
    }//fim de saveLog()
    
    /*[11]----------------------------------------------------------------------
    *    Escreve informacao na barra de status da parte inferior da janela
    --------------------------------------------------------------------------*/
    private static void setStatusBar(final String msg)
    {
        statusBar.setText("");
        statusBar.setText(msg);
    }//fim de setStatusBar()
    
    /*[12]----------------------------------------------------------------------
    *           Escreve na area de texto da janela com identacao
    --------------------------------------------------------------------------*/
    private static void write(String msg, final int ident)
    {
        //Trunca strings muito longas
        if (msg.length() > 120) 
            msg = msg.substring(0,104).toLowerCase() + "...</font><br />";
       
        //Identa de acordo com o nivel de recursividade do download sendo feito
        String htmlText = "";
        for (int i = 1; i <= ident; i++) 
            htmlText += "&#9482;&nbsp;&nbsp;&nbsp;&nbsp;";
        htmlText += msg ;
        
        //Escreve na tela com renderizacao de codigos html
        try
        {
            doc.insertAfterEnd
                (
                    doc.getCharacterElement(doc.getLength()), 
                    htmlText
                );
        }
        catch(Exception e)
        { 
            showErrorMessage(e); 
        }
    
    }//fim de write()
    
    /*[00]----------------------------------------------------------------------
    *
    --------------------------------------------------------------------------*/ 
    private static String getTargetDirName(final String fileName)
    {
        String dir;
        String ext = getFilesExtension(fileName);
        
        switch (ext)
        {
            case "js":
                dir = FileType.JS.label;
                currentWriteColor = FileType.JS.tagColor;
                break;

            case "css":
                dir = FileType.CSS.label;
                currentWriteColor = FileType.CSS.tagColor;
                break;

            case "ico": case "jpg": case "bmp": 
            case "png": case "gif": case "tif":
                dir = FileType.IMAGE.label;
                currentWriteColor = FileType.IMAGE.tagColor;
                if (fileName.contains("avatar"))
                    dir += SEP + AVATARS_DIR_NAME;
                else if (fileName.contains("smiles"))
                    dir += SEP + SMILES_DIR_NAME;
                break;

            default:
                dir = "";
                currentWriteColor = "&#9662;<font color=\"Orange\">";
        }
        return dir;
    }//fim de TargetDir()
    
    /*[13]----------------------------------------------------------------------
    *         Procura por links de arquivos na String htmLine
    --------------------------------------------------------------------------*/
    private static void searchForLinks
    (
        final String htmLine,
        final int ident,
        BufferedWriter out
    )
        throws IOException
    {
        int begin = 0; int end; int h; int s;
              
        while 
        (
            ( (h = htmLine.indexOf("href=\"", begin)) != -1 ) |
            ( (s = htmLine.indexOf("src=\"", begin)) != -1  )                                          
        )
        {
            //Checa se o usuario pausou o download. Nesse caso o metodo poe
            //esta thread para dormir ateh o usuario retomar o download
            checkPause();
            checkStop();
            
            int p;
            
            if (h < s)
            {
                if (h == -1) p = s; else p = h;
            }
            else 
                if (s == -1) p = h; else p = s;
                      
            if (p == h)
                end = p + 6;//href="
            else
                end = p + 5;//src="
            
            out.write(htmLine.substring(begin, end));
            
            begin = end;
                            
            end = htmLine.indexOf('"', begin );
            
            String link = htmLine.substring(begin, end);
            
            begin = end;
            System.out.println(link);
            if
            (
                (pattExternalLink.matcher(link).matches()) ||
                (pattInternalLink.matcher(link).matches())
            )
            {
                if (link.charAt(0) == '/') link = baseUrl + link;
                
                String fileName = link2FileName(link);
                String dirName = getTargetDirName(fileName);
                
                String newLink;
                if (dirName.length() == 0)
                    newLink = fileName;
                else
                    newLink = dirName + SEP + fileName;
               
                if (!DOWNLOADED.contains(link))
                {
                    if 
                    (
                        downloadFile
                        (
                            new URL(link), 
                            new File(downloadDir + SEP + newLink), ident
                        )
                    ) 
                        DOWNLOADED.add(link);
                }
                if (DOWNLOADED.contains(link))
                {
                    
                    System.out.println("novo link "+newLink);
                    out.write(newLink);
                }
                else
                    out.write(link);
                
            }
            else if (PATT_SECTION_TOPIC_POST.matcher(link).matches())
            {
                String newLink;
                int post = link.lastIndexOf('#');
                if (post == -1)
                    newLink = link2FileName(baseUrl + link);
                else
                    newLink = link2FileName(baseUrl + link.substring(0, post));
                newLink += ".html";
                System.out.println("novo link "+newLink);
                out.write(newLink);
            }
            else if (PATT_TO_BASEURL.matcher(link).matches())
            {
                String newLink = link2FileName(baseUrl) + ".html";
                System.out.println("novo link "+newLink);
                out.write(newLink);
            }
            else out.write(link);
                       
        }//fim do while - linha varrida
        
        out.write(htmLine.substring(begin, htmLine.length()));
        out.newLine();
            
    }//fim de searchForFiles()
                        
    /*[14]----------------------------------------------------------------------
    *                 Baixa todas as paginas de um topico
    --------------------------------------------------------------------------*/
    @SuppressWarnings("null")                    
    private static void getTopic(String topicLink, final int ident)
        throws IOException
    {
        TEMP.add(topicLink);
        
        //Enquanto true o metodo continua buscando paginas do topico no servidor
        boolean hasMorePages = true;
        //O numero da pagina sendo baixada
        int countPage = 0;
        
        URL topicUrl = link2Url(topicLink);
        
        //Divide a url da 1a pagina do topico em duas partes para facilitar a
        //geracao das urls das paginas subsequentes deste topico
        String urlStr = topicUrl.toString();
        String urlHead = urlStr.substring(0, urlStr.indexOf('-'));
        String urlTail = urlStr.substring(urlStr.indexOf('-'), urlStr.length());
        
        //Baixa todas as paginas do topico se o loop nao for interrompido por um
        //clique no botao que encerra a execucao do programa
        while (hasMorePages)   
        {
            //Se o usuario pausou o download esta thread eh posta para dormir
            checkPause();
            checkStop();
            
            countPage++;
            
            String topicFileName = url2FileName(topicUrl) + ".html";
                             
            //Faz conexao com o servidor para baixar a pagina do topico
            BufferedReader in = 
                (BufferedReader) tryOpenConnection
                                 (
                                     topicUrl,
                                     ident,
                                     typeOfConnection.FOR_HTML_FILE
                                 );
            
            //Nao foi possivel fazer a conexao para baixar a pagina do topico.
            //O programa nao pode continuar
            if (in == null) showErrorMessage(new IOException());
            
            //Monta o nome do arquivo onde serah gravada a pagina no disco
            File topicFile = new File(downloadDir + SEP + topicFileName); 
      
            //Cria o arquivo para gravar a pagina
            BufferedWriter out = 
                (BufferedWriter) tryOpenFile(topicFile, typeOfFile.FOR_WRITER);
            
            //Nao foi possivel abrir arquivo para gravacao
            //O programa nao pode continuar.
            if (out == null) showErrorMessage(new IOException());
                       
            //Comecando a gravar o arquivo html
            write("&#9661;" + countPage + "&ordf; p&aacute;gina<br />", ident); 

            String htmLine;
                      
            //Le linha por linha do arquivo no servidor e grava no disco
            while ((htmLine = in.readLine()) != null)
            {
                //Se pausou o download esta thread eh posta para dormir
                checkPause();
                checkStop();

                //Se encontra uma pagina com titulo Informações - Página XX
                //eh porque jah foram baixadas todas as paginas do topico
                if (htmLine.contains(NO_MORE_PAGES))
                {
                    hasMorePages = false;
                    break;
                }
                           
                //Os metodos a seguir soh sao chamados quando seus respectivos
                //checkboxes estao marcados
                searchForLinks(htmLine, ident + 1, out);
                                
            }//fim do while - Gravou uma pagina do topico
            
            //Fecha conexao e arquivo
            close(in, null);
            close(out, topicFile);
            
            //Arquivo gravado ou serah deletado (o ultimo baixado sera deletado)
            if (hasMorePages)  
                write
                (
                    "&#9651;" + countPage + 
                    "&ordf; p&aacute;gina<br />",
                    ident
                );
            else
            {
                write
                (
                    "&#9746;<strike>" + countPage +
                    "&ordf; p&aacute;gina</strike><br />", 
                    ident
                );
                if (topicFile.exists()) topicFile.delete();
            }
            
            //Monta URL da proxima pagina do topico a ser baixada
            topicUrl = new URL(urlHead + "p" + (countPage*50) + urlTail);
                     
       }//fim do while - Baixou todas as paginas de um topico
    
    }//fim de getTopic()
     
    /*[15]----------------------------------------------------------------------
    *           Baixa todas as paginas do forum - secoes e topicos
    --------------------------------------------------------------------------*/
    @SuppressWarnings("null")
    private static void getHtmlFiles
                        (
                            final String sectionLink,
                            final int ident,
                            final StringBuilder path
                        )
        throws IOException
    {
        TEMP.add(sectionLink);
        URL sectionUrl = link2Url(sectionLink);
        
        //O arquivo onde sera gravada a pagina html desta secao
        File sectionFile = 
            new File(downloadDir + SEP + url2FileName(sectionUrl) + ".html");
        
        //Faz conexao com o servidor
        BufferedReader in = 
            (BufferedReader) tryOpenConnection
                             (
                                 sectionUrl,
                                 ident, 
                                 typeOfConnection.FOR_HTML_FILE
                             );
        
        //Nao foi possivel fazer conexao para baixar pagina de secao
        //O programa nao pode continuar
        if (in == null) showErrorMessage(new IOException());
      
       //Cria o arquivo para gravar a pagina
       BufferedWriter out = 
           (BufferedWriter) tryOpenFile(sectionFile, typeOfFile.FOR_WRITER);
       
        //Nao foi possivel abrir arquivo para gravacao
        //O programa nao pode continuar
        if (out == null) showErrorMessage(new IOException());

        String htmLine;
        //Le linha por linha do arquivo no servidor ou eh interrompido se o 
        //usuario clicar no botao de Sair
        while ( (htmLine = in.readLine()) != null )
        {
            //Checa se o usuario pausou o download. Nesse caso o metodo poe
            //esta thread para dormir ateh o usuario retomar o download
            checkPause();
            checkStop();
                          
            searchForLinks(htmLine, ident, out);
            
            //Uma linha com a string HIERARCHY indica que esta linha tem a lista
            //de links para secoes mostrados pela pagina que esta sendo lida do
            //servidor
            int begin = 0; int p;
            while ( (p = htmLine.indexOf(HIERARCHY, begin)) != -1 ) 
            {
                checkPause();
                checkStop();
                
                //A cada passo desse loop eh extraido um link para secao e 
                //este link eh visitado recursivamente por este metodo
                begin = p + 27; 
                String nextSectionLink = 
                    htmLine.substring(begin, htmLine.indexOf('"', begin));
                              
                //Secoes jah baixadas sao registradas na estrutura DOWNLOADED
                //para que nao sejam baixadas novamente
                if (!TEMP.contains(nextSectionLink))
                {
                    
                    int oldLength = path.length();
                    //Monta a string que serah enviada a barra de status
                    path.append(" :: ").append(clean(nextSectionLink));
      
                    setStatusBar(new String(path));
                                     
                    write
                    (
                        "&#9675;<b><u>" + clean(nextSectionLink) +
                        "</u></b><br />",
                        ident
                    );
                                         
                    getHtmlFiles(nextSectionLink, ident + 1, path);

                    DOWNLOADED.add(nextSectionLink);
                    
                    path.delete(oldLength, path.length());    
                    setStatusBar(new String(path));
                    
                }//fim do if - secao gravada
                
            }//fim do while - Fim da varredura de todos os links para secoes
           
            //Loop de varredura para links de topicos
            begin = 0;  
            while ( (p = htmLine.indexOf(TOPIC, begin)) != -1 ) 
            {
                //Se pausou o download esta thread eh posta para dormir
                checkPause();
                checkStop();
                
                begin = p + 25;               
                String topicLink = 
                    htmLine.substring(begin, htmLine.indexOf('"', begin));
                                
                String cleanTopicLink = clean(topicLink);
                
                if (!TEMP.contains(topicLink))
                {
                                        
                    write(" <br />", ident);
                    write("&#9660;<tt>" + cleanTopicLink + "</tt><br />",ident);  
              
                    getTopic(topicLink, ident + 1);

                    write
                    (
                        "&#9650;<tt>" + 
                        BAR.substring(0, cleanTopicLink.length()) + 
                        "</tt><br />", 
                        ident
                    ); 
                    DOWNLOADED.add(topicLink);
                    
                }//fim do if - Topico gravado
   
            }//fim do while - Fim da varredura para links de topicos
                       
        }//fim do while - Varreu todas as secoes e/ou topicos
	
        //Fecha arquivo e conexao
        close(in, null);
        close(out, sectionFile);
                       
    }//fim de getHtmlFiles()
                          
    /*[16]----------------------------------------------------------------------
    *                Solicita a URL do forum ao usuario
    --------------------------------------------------------------------------*/                    
    @SuppressWarnings("ResultOfObjectAllocationIgnored")
    private static void getURL()
    {
        boolean badUrl = true;
        
        while (badUrl)
        {
            baseUrl = 
                JOptionPane.
                    showInputDialog(thisObject, "Digite a URL", DEFAULT_URL);
   
            if (baseUrl == null) System.exit(0);
            
            try
            {
                new URL(baseUrl);
                badUrl = false;
            }
            catch (MalformedURLException e)
            {
                baseUrl = "https://" + baseUrl;
                try
                {
                    new URL(baseUrl);
                    badUrl = false;
                }
                catch (MalformedURLException e2) {}
            }
            
        }//fim do while
        
    }//fim de getURL()
    
    /*[17]----------------------------------------------------------------------
    *                             Método main
    --------------------------------------------------------------------------*/
    public static void main(String[] args)
    {
        //Cria e inicializa o objeto com a janela do programa. Inicializa outros
        //objetos no construtor de DownloadCC quando necessario
        thisObject = new Fmirror();
        
        thisObject.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        //Dimensoes iniciais da janela
        thisObject.setSize(690,450);
        //Determina que a janela do programa seja aberta no centro da tela
        thisObject.setLocationRelativeTo(null);
        
        //Abre a janela
        thisObject.setVisible(true);
        
        getURL();
         
        //Registra os listeners dos botoes e itens de menu. Metodos que serao
        //chamados quando um objeto for clicado ou se o mouse passar por ou sair
        //dele
        pauseButton.addActionListener(thisObject);
        pauseButton.addMouseListener(thisObject);
        exitButton.addActionListener(thisObject);
        exitButton.addMouseListener(thisObject);
        selector.addMouseListener(thisObject);
           
        exitActionItem.addActionListener(thisObject);
       
        //Registra o listener para a barra de rolagem vertical. Esse listener
        //irah controlar a rolagem automatica do texto na janela
        scrollPane.getVerticalScrollBar().addAdjustmentListener(thisObject);
        
        //Registra listener para o botao de fechamento de janela
        thisObject.addWindowListener(thisObject);
        //A janela do programa nao poderah ser fechada automaticamente pelo 
        //botao no canto superior direito
        
        root = baseUrl;
        
        if ((baseUrl.startsWith("https://")) ||(baseUrl.startsWith("http://")))  
            root = 
                baseUrl.substring(baseUrl.indexOf("/") + 2, baseUrl.length());
        
        if (root.startsWith("www.")) root = root.substring(4, root.length());
              
        if (root.indexOf('.') != -1) root = root.substring(0,root.indexOf('.'));
        
        rootSep = root + SEP;
        
        downloadDir = rootSep + DOWNLOAD_DIR_NAME;
        
        File dir = new File(root); if (!dir.exists()) dir.mkdirs();
        dir = new File(downloadDir); if (!dir.exists()) dir.mkdirs();
        
        for (FileType type: FileType.values())
        {
            CHECK_BOX_ITEM[type.ordinal()].addActionListener(thisObject);
            dir = new File(downloadDir + SEP + type.label);
            if (!dir.exists()) dir.mkdirs();
            if (type == FileType.IMAGE)
            {
                dir = new File
                          (
                              downloadDir + SEP + type.label +
                              SEP + AVATARS_DIR_NAME
                          );
                if (!dir.exists()) dir.mkdirs();
                dir = new File
                          (
                              downloadDir + SEP + type.label +
                              SEP + SMILES_DIR_NAME
                          );
                if (!dir.exists()) dir.mkdirs();
            }
        }//fim do for
        
        //Nome do arquivo de log que registra tudo que jah foi baixado
        downloadFileName = rootSep + DOWNLOAD_FILE_NAME;
                           
        //Le o arquivo de log de download se jah houver um
        readLog();
               
        try
        {
            setStatusBar(root);
            
            //Espera ateh que o botao Iniciar ou Sair seja clicado
            setPause(true);
            checkPause();
            checkStop();
            
            String ext ="";
            for (FileType type: FileType.values())
            {
                if (CHECK_BOX_ITEM[type.ordinal()].isSelected())
                {
                    switch (type)
                    {
                        case JS:
                            ext += "js|";
                            break;
                        case CSS:
                            ext += "css|";
                            break;
                        case IMAGE:
                            ext += "jpg|png|gif|bmp|ico|tif|";
                    }
                }//fim do if
            }//fim do for
            if (ext.length() > 0) 
                externalLink += 
                    "[.](?i:" + ext.substring(0, ext.length() - 1) + ")";
            else
                externalLink = "[^.\\n]naoCasar";
                                
            pattExternalLink = Pattern.compile(externalLink);
                               
            setStatusBar(root);
            
            //Objeto para montar as strings que serao exibidas pela barra de 
            //status
            StringBuilder path = new StringBuilder(128);
            
            write("&#9711;" + root + "<br />", 0);
                             
            //Se normalExecution eh retornada true, o programa executou ateh
            //finalizar o download do forum inteiro
            getHtmlFiles("/", 1, path.append(root));
            
            DOWNLOADED.add("/");
            
            //O objeto CONCLUDED informa que o download concluiu
            CONCLUDED.set(true); 
        }
        catch(Exception e)
        {
            showErrorMessage(e);
        }
        
        Toolkit.getDefaultToolkit().beep();
        write("&#9711;" + root + "<br />", 0);
        
        checkStop();
      
    }//fim de main()
    
    /***************************************************************************
                            Controle de concorrencia
    ***************************************************************************/
    
    /*[01]----------------------------------------------------------------------
    *        Checa se o usuario interrompeu a execucao do programa
    --------------------------------------------------------------------------*/
    private static void checkStop()
    {
        try
        {
            STOP_LOCK.lock();
            if (stop) saveLog(0);
        }
        finally
        {
            STOP_LOCK.unlock();
        }
    }//fim de checkStop()
    
    /*[02]----------------------------------------------------------------------
    *  Interrompe o download e encerra execucao do programa. Eh chamado pelos
    *  handlers do botao Sair e do botao de fechar a janela, ou pelo item de  
    *  menu dropdown.
    --------------------------------------------------------------------------*/
    private static void stop()
    {
        //Interrompe o download e encerra programa
        if (!CONCLUDED.get())
        {
            setPause(false);
            try
            {
                STOP_LOCK.lock();
                stop = true;
            }
            finally
            {
                STOP_LOCK.unlock();
            }
        }
        else
            saveLog(0);
             
    }//fim de stop()
    
    /*[03]----------------------------------------------------------------------
    *           Seta se a thread do download ira pausar ou retomar
    --------------------------------------------------------------------------*/
    private static void setPause(boolean state)
    {
        try
        {
            PAUSE_LOCK.lock();
            pause = state;
            if (!pause) PAUSE_CONDITION.signal();
        }
        catch (Exception e) {}
        finally
        {
            PAUSE_LOCK.unlock();
        }
    }//fim de setPause()
    
    /*[04]----------------------------------------------------------------------
    *      Se pause igual true o processo eh posto para dormir
    --------------------------------------------------------------------------*/
    private static void checkPause()
    {
        try
        {
            PAUSE_LOCK.lock();
            //A thread que executar este metodo, dormirah SE e ENQUANTO 
            //o booleano askToPause for true. Quando pause eh tornado
            //false, o metodo setPause() envia um signal para acordar a
            //thread
            while(pause) PAUSE_CONDITION.await();
        }
        catch (Exception e) {}
        finally
        {
            PAUSE_LOCK.unlock();
        }
    }//fim de checkPause()
    
    /***************************************************************************
                           Listeners de eventos 
    ***************************************************************************/
    
    private static final String PAUSE_BUTTON_LABEL = "  Pausar  ";
    private static boolean pauseButtonFirstClick = true;
    /*[01]----------------------------------------------------------------------
    *  Listener para os botoes da janela e itens do menu. Esse metodo eh 
    *  executado toda vez que um botao ou item de menu eh clicado.
    --------------------------------------------------------------------------*/
    @Override
    public void actionPerformed(ActionEvent e)
    {
        Object o = e.getSource();
        
        //Se o botao Pausar/Continuar foi clicado
        if (o == pauseButton)
        {
            if (!pauseButton.getText().equals(PAUSE_BUTTON_LABEL))
            {
                if (pauseButtonFirstClick)
                {
                    selector.setVisible(false);
                    pauseButtonFirstClick = false;
                }
                pauseButton.setText(PAUSE_BUTTON_LABEL);
                pauseButton.setBackground(Color.ORANGE);
                setPause(false);
            }
            else
            {
                pauseButton.setText("Continuar");
                pauseButton.setBackground(Color.GREEN);
                setPause(true);
            }
        }
        //Se item do menu de caixa de selecao foi clicado nada faz
        else if (o.getClass().getName().equals("javax.swing.JCheckBoxMenuItem"))
        {}
        //Entao foi botao Sair ou item Sair do menu
        else stop();
               
    }//fim de actionPerformed()
    
    /*[02]----------------------------------------------------------------------
    *    Muda a cor do botao ou do item na barra de menu da janela, ao passar o 
    *    mouse sobre
    --------------------------------------------------------------------------*/
    @Override
    public void mouseEntered(MouseEvent e)
    {
        Object o = e.getSource();
      
        if (o == pauseButton)
        {
            if (!pauseButton.getText().equals(PAUSE_BUTTON_LABEL))
                pauseButton.setBackground(Color.GREEN);
            else
                pauseButton.setBackground(Color.ORANGE);
        }
        else
            if (o == exitButton)
                exitButton.setBackground(LIGHT_RED);
            else
                selector.setForeground(Color.BLUE);
                
    }//fim de mouseEntered()
    
    /*[03]----------------------------------------------------------------------
    *    Restaura a cor normal quando o cursor sai do botao ou do item de menu
    *    na barra de menu da janela
    --------------------------------------------------------------------------*/
    @Override
    public void mouseExited(MouseEvent e)
    {
        Object o = e.getSource();
        if (o == pauseButton)
            pauseButton.setBackground(BUTTON_NORMAL_COLOR);
        else
            if (o == exitButton)
                exitButton.setBackground(BUTTON_NORMAL_COLOR);
            else
                selector.setForeground(Color.BLACK);
                
    }//fim de mouseExited()
    
    /*[04]----------------------------------------------------------------------
    *             Encerra o programa quando a janela eh fechada
    --------------------------------------------------------------------------*/
   @Override
   public void windowClosing(WindowEvent e) 
   {
      stop();
   }//fim do handler de evento do fechamento da janela
   
   /*[05]----------------------------------------------------------------------
   * Controla a rolagem automatica. Descolar a barra do final desliga a
   * rolagem automatica. Colar a barra no final religa a rolagem automatica.
   --------------------------------------------------------------------------*/
   @Override
    public void adjustmentValueChanged(AdjustmentEvent e) 
    {
        int max = brm.getMaximum(); 
       
        if ( (!brm.getValueIsAdjusting()) && (atBottom) ) 
            brm.setValue(brm.getMaximum());
        else
            atBottom = ((brm.getValue() + brm.getExtent()) >= max);
    }//fim de listener para scrollPane
   
   /*[06]----------------------------------------------------------------------
   *             Metodos vazios da interface WindowListener
   --------------------------------------------------------------------------*/
   @Override
   public void windowActivated(WindowEvent e){}
   @Override
   public void windowClosed(WindowEvent e){}
   @Override
   public void windowDeactivated(WindowEvent e){}
   @Override
   public void windowDeiconified(WindowEvent e){}
   @Override
   public void windowIconified(WindowEvent e){}
   @Override
   public void windowOpened(WindowEvent e){}
   
   /*[07]----------------------------------------------------------------------
   *              Metodos vazios da interface MouseListener
   --------------------------------------------------------------------------*/
   @Override
   public void mouseClicked(MouseEvent e) {}
   @Override
   public void mousePressed(MouseEvent e) {}
   @Override
   public void mouseReleased(MouseEvent e) {}
       
  
}//fim da classe Forumirror

